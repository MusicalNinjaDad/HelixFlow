name: CI

on:
  push:
  pull_request:

env:
  CARGO_INCREMENTAL: "0"
  RUSTC_BOOTSTRAP: "1"

jobs:
  test:
    strategy:
      matrix:
        os: [
          ubuntu-latest, 
          windows-latest,
        ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: swatinem/rust-cache@v2
        if: ${{ runner.os != 'Windows' }}
        with:
          shared-key: "helixflow"
      - name: Cache cargo registry and build
        if: ${{ runner.os == 'Windows' && (github.event_name == 'pull_request' || contains(github.event.head_commit.message, '[CI-win]')) }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: "Set up Rust"
        run: rustup show
      - name: Install nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest
      - name: "Test"
        if: ${{ runner.os != 'Windows' || (github.event_name == 'pull_request' || contains(github.event.head_commit.message, '[CI-win]')) }}
        run: cargo nextest run

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: swatinem/rust-cache@v2
        with:
          shared-key: "helixflow"
      - name: "Set up Rust"
        run: |
          rustup show
          rustup component add clippy
      - name: "Lint"
        run: cargo clippy

  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: "Set up Rust"
        run: |
          rustup show
          rustup component add rustfmt
      - name: "Check formatting"
        run: cargo fmt